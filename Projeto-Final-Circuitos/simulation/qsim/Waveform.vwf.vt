// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2017 11:15:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Projeto_final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto_final_vlg_sample_tst(
	clk,
	LER_A,
	LER_B,
	Operar,
	Reset,
	Switches,
	Validar,
	sampler_tx
);
input  clk;
input  LER_A;
input  LER_B;
input  Operar;
input  Reset;
input [15:0] Switches;
input  Validar;
output sampler_tx;

reg sample;
time current_time;
always @(clk or LER_A or LER_B or Operar or Reset or Switches or Validar)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Projeto_final_vlg_check_tst (
	D1,
	D2,
	D3,
	D4,
	Debug_A,
	Debug_B,
	LED_16,
	LED_TERMINO,
	sampler_rx
);
input [6:0] D1;
input [6:0] D2;
input [6:0] D3;
input [6:0] D4;
input [15:0] Debug_A;
input [15:0] Debug_B;
input [15:0] LED_16;
input  LED_TERMINO;
input sampler_rx;

reg [6:0] D1_expected;
reg [6:0] D2_expected;
reg [6:0] D3_expected;
reg [6:0] D4_expected;
reg [15:0] Debug_A_expected;
reg [15:0] Debug_B_expected;
reg [15:0] LED_16_expected;
reg  LED_TERMINO_expected;

reg [6:0] D1_prev;
reg [6:0] D2_prev;
reg [6:0] D3_prev;
reg [6:0] D4_prev;
reg [15:0] Debug_A_prev;
reg [15:0] Debug_B_prev;
reg [15:0] LED_16_prev;
reg  LED_TERMINO_prev;

reg [6:0] D1_expected_prev;
reg [6:0] D2_expected_prev;
reg [6:0] D3_expected_prev;
reg [6:0] D4_expected_prev;
reg [15:0] Debug_A_expected_prev;
reg [15:0] Debug_B_expected_prev;
reg [15:0] LED_16_expected_prev;
reg  LED_TERMINO_expected_prev;

reg [6:0] last_D1_exp;
reg [6:0] last_D2_exp;
reg [6:0] last_D3_exp;
reg [6:0] last_D4_exp;
reg [15:0] last_Debug_A_exp;
reg [15:0] last_Debug_B_exp;
reg [15:0] last_LED_16_exp;
reg  last_LED_TERMINO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	Debug_A_prev = Debug_A;
	Debug_B_prev = Debug_B;
	LED_16_prev = LED_16;
	LED_TERMINO_prev = LED_TERMINO;
end

// update expected /o prevs

always @(trigger)
begin
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	Debug_A_expected_prev = Debug_A_expected;
	Debug_B_expected_prev = Debug_B_expected;
	LED_16_expected_prev = LED_16_expected;
	LED_TERMINO_expected_prev = LED_TERMINO_expected;
end


// expected D1[ 6 ]
initial
begin
	D1_expected[6] = 1'bX;
end 
// expected D1[ 5 ]
initial
begin
	D1_expected[5] = 1'bX;
end 
// expected D1[ 4 ]
initial
begin
	D1_expected[4] = 1'bX;
end 
// expected D1[ 3 ]
initial
begin
	D1_expected[3] = 1'bX;
end 
// expected D1[ 2 ]
initial
begin
	D1_expected[2] = 1'bX;
end 
// expected D1[ 1 ]
initial
begin
	D1_expected[1] = 1'bX;
end 
// expected D1[ 0 ]
initial
begin
	D1_expected[0] = 1'bX;
end 
// expected D2[ 6 ]
initial
begin
	D2_expected[6] = 1'bX;
end 
// expected D2[ 5 ]
initial
begin
	D2_expected[5] = 1'bX;
end 
// expected D2[ 4 ]
initial
begin
	D2_expected[4] = 1'bX;
end 
// expected D2[ 3 ]
initial
begin
	D2_expected[3] = 1'bX;
end 
// expected D2[ 2 ]
initial
begin
	D2_expected[2] = 1'bX;
end 
// expected D2[ 1 ]
initial
begin
	D2_expected[1] = 1'bX;
end 
// expected D2[ 0 ]
initial
begin
	D2_expected[0] = 1'bX;
end 
// expected D3[ 6 ]
initial
begin
	D3_expected[6] = 1'bX;
end 
// expected D3[ 5 ]
initial
begin
	D3_expected[5] = 1'bX;
end 
// expected D3[ 4 ]
initial
begin
	D3_expected[4] = 1'bX;
end 
// expected D3[ 3 ]
initial
begin
	D3_expected[3] = 1'bX;
end 
// expected D3[ 2 ]
initial
begin
	D3_expected[2] = 1'bX;
end 
// expected D3[ 1 ]
initial
begin
	D3_expected[1] = 1'bX;
end 
// expected D3[ 0 ]
initial
begin
	D3_expected[0] = 1'bX;
end 
// expected D4[ 6 ]
initial
begin
	D4_expected[6] = 1'bX;
end 
// expected D4[ 5 ]
initial
begin
	D4_expected[5] = 1'bX;
end 
// expected D4[ 4 ]
initial
begin
	D4_expected[4] = 1'bX;
end 
// expected D4[ 3 ]
initial
begin
	D4_expected[3] = 1'bX;
end 
// expected D4[ 2 ]
initial
begin
	D4_expected[2] = 1'bX;
end 
// expected D4[ 1 ]
initial
begin
	D4_expected[1] = 1'bX;
end 
// expected D4[ 0 ]
initial
begin
	D4_expected[0] = 1'bX;
end 
// expected Debug_A[ 15 ]
initial
begin
	Debug_A_expected[15] = 1'bX;
end 
// expected Debug_A[ 14 ]
initial
begin
	Debug_A_expected[14] = 1'bX;
end 
// expected Debug_A[ 13 ]
initial
begin
	Debug_A_expected[13] = 1'bX;
end 
// expected Debug_A[ 12 ]
initial
begin
	Debug_A_expected[12] = 1'bX;
end 
// expected Debug_A[ 11 ]
initial
begin
	Debug_A_expected[11] = 1'bX;
end 
// expected Debug_A[ 10 ]
initial
begin
	Debug_A_expected[10] = 1'bX;
end 
// expected Debug_A[ 9 ]
initial
begin
	Debug_A_expected[9] = 1'bX;
end 
// expected Debug_A[ 8 ]
initial
begin
	Debug_A_expected[8] = 1'bX;
end 
// expected Debug_A[ 7 ]
initial
begin
	Debug_A_expected[7] = 1'bX;
end 
// expected Debug_A[ 6 ]
initial
begin
	Debug_A_expected[6] = 1'bX;
end 
// expected Debug_A[ 5 ]
initial
begin
	Debug_A_expected[5] = 1'bX;
end 
// expected Debug_A[ 4 ]
initial
begin
	Debug_A_expected[4] = 1'bX;
end 
// expected Debug_A[ 3 ]
initial
begin
	Debug_A_expected[3] = 1'bX;
end 
// expected Debug_A[ 2 ]
initial
begin
	Debug_A_expected[2] = 1'bX;
end 
// expected Debug_A[ 1 ]
initial
begin
	Debug_A_expected[1] = 1'bX;
end 
// expected Debug_A[ 0 ]
initial
begin
	Debug_A_expected[0] = 1'bX;
end 
// expected Debug_B[ 15 ]
initial
begin
	Debug_B_expected[15] = 1'bX;
end 
// expected Debug_B[ 14 ]
initial
begin
	Debug_B_expected[14] = 1'bX;
end 
// expected Debug_B[ 13 ]
initial
begin
	Debug_B_expected[13] = 1'bX;
end 
// expected Debug_B[ 12 ]
initial
begin
	Debug_B_expected[12] = 1'bX;
end 
// expected Debug_B[ 11 ]
initial
begin
	Debug_B_expected[11] = 1'bX;
end 
// expected Debug_B[ 10 ]
initial
begin
	Debug_B_expected[10] = 1'bX;
end 
// expected Debug_B[ 9 ]
initial
begin
	Debug_B_expected[9] = 1'bX;
end 
// expected Debug_B[ 8 ]
initial
begin
	Debug_B_expected[8] = 1'bX;
end 
// expected Debug_B[ 7 ]
initial
begin
	Debug_B_expected[7] = 1'bX;
end 
// expected Debug_B[ 6 ]
initial
begin
	Debug_B_expected[6] = 1'bX;
end 
// expected Debug_B[ 5 ]
initial
begin
	Debug_B_expected[5] = 1'bX;
end 
// expected Debug_B[ 4 ]
initial
begin
	Debug_B_expected[4] = 1'bX;
end 
// expected Debug_B[ 3 ]
initial
begin
	Debug_B_expected[3] = 1'bX;
end 
// expected Debug_B[ 2 ]
initial
begin
	Debug_B_expected[2] = 1'bX;
end 
// expected Debug_B[ 1 ]
initial
begin
	Debug_B_expected[1] = 1'bX;
end 
// expected Debug_B[ 0 ]
initial
begin
	Debug_B_expected[0] = 1'bX;
end 
// expected LED_16[ 15 ]
initial
begin
	LED_16_expected[15] = 1'bX;
end 
// expected LED_16[ 14 ]
initial
begin
	LED_16_expected[14] = 1'bX;
end 
// expected LED_16[ 13 ]
initial
begin
	LED_16_expected[13] = 1'bX;
end 
// expected LED_16[ 12 ]
initial
begin
	LED_16_expected[12] = 1'bX;
end 
// expected LED_16[ 11 ]
initial
begin
	LED_16_expected[11] = 1'bX;
end 
// expected LED_16[ 10 ]
initial
begin
	LED_16_expected[10] = 1'bX;
end 
// expected LED_16[ 9 ]
initial
begin
	LED_16_expected[9] = 1'bX;
end 
// expected LED_16[ 8 ]
initial
begin
	LED_16_expected[8] = 1'bX;
end 
// expected LED_16[ 7 ]
initial
begin
	LED_16_expected[7] = 1'bX;
end 
// expected LED_16[ 6 ]
initial
begin
	LED_16_expected[6] = 1'bX;
end 
// expected LED_16[ 5 ]
initial
begin
	LED_16_expected[5] = 1'bX;
end 
// expected LED_16[ 4 ]
initial
begin
	LED_16_expected[4] = 1'bX;
end 
// expected LED_16[ 3 ]
initial
begin
	LED_16_expected[3] = 1'bX;
end 
// expected LED_16[ 2 ]
initial
begin
	LED_16_expected[2] = 1'bX;
end 
// expected LED_16[ 1 ]
initial
begin
	LED_16_expected[1] = 1'bX;
end 
// expected LED_16[ 0 ]
initial
begin
	LED_16_expected[0] = 1'bX;
end 

// expected LED_TERMINO
initial
begin
	LED_TERMINO_expected = 1'bX;
end 
// generate trigger
always @(D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or Debug_A_expected or Debug_A or Debug_B_expected or Debug_B or LED_16_expected or LED_16 or LED_TERMINO_expected or LED_TERMINO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected Debug_A = %b | expected Debug_B = %b | expected LED_16 = %b | expected LED_TERMINO = %b | ",D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,Debug_A_expected_prev,Debug_B_expected_prev,LED_16_expected_prev,LED_TERMINO_expected_prev);
	$display("| real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real Debug_A = %b | real Debug_B = %b | real LED_16 = %b | real LED_TERMINO = %b | ",D1_prev,D2_prev,D3_prev,D4_prev,Debug_A_prev,Debug_B_prev,LED_16_prev,LED_TERMINO_prev);
`endif
	if (
		( D1_expected_prev[0] !== 1'bx ) && ( D1_prev[0] !== D1_expected_prev[0] )
		&& ((D1_expected_prev[0] !== last_D1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[0] = D1_expected_prev[0];
	end
	if (
		( D1_expected_prev[1] !== 1'bx ) && ( D1_prev[1] !== D1_expected_prev[1] )
		&& ((D1_expected_prev[1] !== last_D1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[1] = D1_expected_prev[1];
	end
	if (
		( D1_expected_prev[2] !== 1'bx ) && ( D1_prev[2] !== D1_expected_prev[2] )
		&& ((D1_expected_prev[2] !== last_D1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[2] = D1_expected_prev[2];
	end
	if (
		( D1_expected_prev[3] !== 1'bx ) && ( D1_prev[3] !== D1_expected_prev[3] )
		&& ((D1_expected_prev[3] !== last_D1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[3] = D1_expected_prev[3];
	end
	if (
		( D1_expected_prev[4] !== 1'bx ) && ( D1_prev[4] !== D1_expected_prev[4] )
		&& ((D1_expected_prev[4] !== last_D1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[4] = D1_expected_prev[4];
	end
	if (
		( D1_expected_prev[5] !== 1'bx ) && ( D1_prev[5] !== D1_expected_prev[5] )
		&& ((D1_expected_prev[5] !== last_D1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[5] = D1_expected_prev[5];
	end
	if (
		( D1_expected_prev[6] !== 1'bx ) && ( D1_prev[6] !== D1_expected_prev[6] )
		&& ((D1_expected_prev[6] !== last_D1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[6] = D1_expected_prev[6];
	end
	if (
		( D2_expected_prev[0] !== 1'bx ) && ( D2_prev[0] !== D2_expected_prev[0] )
		&& ((D2_expected_prev[0] !== last_D2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[0] = D2_expected_prev[0];
	end
	if (
		( D2_expected_prev[1] !== 1'bx ) && ( D2_prev[1] !== D2_expected_prev[1] )
		&& ((D2_expected_prev[1] !== last_D2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[1] = D2_expected_prev[1];
	end
	if (
		( D2_expected_prev[2] !== 1'bx ) && ( D2_prev[2] !== D2_expected_prev[2] )
		&& ((D2_expected_prev[2] !== last_D2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[2] = D2_expected_prev[2];
	end
	if (
		( D2_expected_prev[3] !== 1'bx ) && ( D2_prev[3] !== D2_expected_prev[3] )
		&& ((D2_expected_prev[3] !== last_D2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[3] = D2_expected_prev[3];
	end
	if (
		( D2_expected_prev[4] !== 1'bx ) && ( D2_prev[4] !== D2_expected_prev[4] )
		&& ((D2_expected_prev[4] !== last_D2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[4] = D2_expected_prev[4];
	end
	if (
		( D2_expected_prev[5] !== 1'bx ) && ( D2_prev[5] !== D2_expected_prev[5] )
		&& ((D2_expected_prev[5] !== last_D2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[5] = D2_expected_prev[5];
	end
	if (
		( D2_expected_prev[6] !== 1'bx ) && ( D2_prev[6] !== D2_expected_prev[6] )
		&& ((D2_expected_prev[6] !== last_D2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[6] = D2_expected_prev[6];
	end
	if (
		( D3_expected_prev[0] !== 1'bx ) && ( D3_prev[0] !== D3_expected_prev[0] )
		&& ((D3_expected_prev[0] !== last_D3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[0] = D3_expected_prev[0];
	end
	if (
		( D3_expected_prev[1] !== 1'bx ) && ( D3_prev[1] !== D3_expected_prev[1] )
		&& ((D3_expected_prev[1] !== last_D3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[1] = D3_expected_prev[1];
	end
	if (
		( D3_expected_prev[2] !== 1'bx ) && ( D3_prev[2] !== D3_expected_prev[2] )
		&& ((D3_expected_prev[2] !== last_D3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[2] = D3_expected_prev[2];
	end
	if (
		( D3_expected_prev[3] !== 1'bx ) && ( D3_prev[3] !== D3_expected_prev[3] )
		&& ((D3_expected_prev[3] !== last_D3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[3] = D3_expected_prev[3];
	end
	if (
		( D3_expected_prev[4] !== 1'bx ) && ( D3_prev[4] !== D3_expected_prev[4] )
		&& ((D3_expected_prev[4] !== last_D3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[4] = D3_expected_prev[4];
	end
	if (
		( D3_expected_prev[5] !== 1'bx ) && ( D3_prev[5] !== D3_expected_prev[5] )
		&& ((D3_expected_prev[5] !== last_D3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[5] = D3_expected_prev[5];
	end
	if (
		( D3_expected_prev[6] !== 1'bx ) && ( D3_prev[6] !== D3_expected_prev[6] )
		&& ((D3_expected_prev[6] !== last_D3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[6] = D3_expected_prev[6];
	end
	if (
		( D4_expected_prev[0] !== 1'bx ) && ( D4_prev[0] !== D4_expected_prev[0] )
		&& ((D4_expected_prev[0] !== last_D4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[0] = D4_expected_prev[0];
	end
	if (
		( D4_expected_prev[1] !== 1'bx ) && ( D4_prev[1] !== D4_expected_prev[1] )
		&& ((D4_expected_prev[1] !== last_D4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[1] = D4_expected_prev[1];
	end
	if (
		( D4_expected_prev[2] !== 1'bx ) && ( D4_prev[2] !== D4_expected_prev[2] )
		&& ((D4_expected_prev[2] !== last_D4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[2] = D4_expected_prev[2];
	end
	if (
		( D4_expected_prev[3] !== 1'bx ) && ( D4_prev[3] !== D4_expected_prev[3] )
		&& ((D4_expected_prev[3] !== last_D4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[3] = D4_expected_prev[3];
	end
	if (
		( D4_expected_prev[4] !== 1'bx ) && ( D4_prev[4] !== D4_expected_prev[4] )
		&& ((D4_expected_prev[4] !== last_D4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[4] = D4_expected_prev[4];
	end
	if (
		( D4_expected_prev[5] !== 1'bx ) && ( D4_prev[5] !== D4_expected_prev[5] )
		&& ((D4_expected_prev[5] !== last_D4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[5] = D4_expected_prev[5];
	end
	if (
		( D4_expected_prev[6] !== 1'bx ) && ( D4_prev[6] !== D4_expected_prev[6] )
		&& ((D4_expected_prev[6] !== last_D4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[6] = D4_expected_prev[6];
	end
	if (
		( Debug_A_expected_prev[0] !== 1'bx ) && ( Debug_A_prev[0] !== Debug_A_expected_prev[0] )
		&& ((Debug_A_expected_prev[0] !== last_Debug_A_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[0] = Debug_A_expected_prev[0];
	end
	if (
		( Debug_A_expected_prev[1] !== 1'bx ) && ( Debug_A_prev[1] !== Debug_A_expected_prev[1] )
		&& ((Debug_A_expected_prev[1] !== last_Debug_A_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[1] = Debug_A_expected_prev[1];
	end
	if (
		( Debug_A_expected_prev[2] !== 1'bx ) && ( Debug_A_prev[2] !== Debug_A_expected_prev[2] )
		&& ((Debug_A_expected_prev[2] !== last_Debug_A_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[2] = Debug_A_expected_prev[2];
	end
	if (
		( Debug_A_expected_prev[3] !== 1'bx ) && ( Debug_A_prev[3] !== Debug_A_expected_prev[3] )
		&& ((Debug_A_expected_prev[3] !== last_Debug_A_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[3] = Debug_A_expected_prev[3];
	end
	if (
		( Debug_A_expected_prev[4] !== 1'bx ) && ( Debug_A_prev[4] !== Debug_A_expected_prev[4] )
		&& ((Debug_A_expected_prev[4] !== last_Debug_A_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[4] = Debug_A_expected_prev[4];
	end
	if (
		( Debug_A_expected_prev[5] !== 1'bx ) && ( Debug_A_prev[5] !== Debug_A_expected_prev[5] )
		&& ((Debug_A_expected_prev[5] !== last_Debug_A_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[5] = Debug_A_expected_prev[5];
	end
	if (
		( Debug_A_expected_prev[6] !== 1'bx ) && ( Debug_A_prev[6] !== Debug_A_expected_prev[6] )
		&& ((Debug_A_expected_prev[6] !== last_Debug_A_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[6] = Debug_A_expected_prev[6];
	end
	if (
		( Debug_A_expected_prev[7] !== 1'bx ) && ( Debug_A_prev[7] !== Debug_A_expected_prev[7] )
		&& ((Debug_A_expected_prev[7] !== last_Debug_A_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[7] = Debug_A_expected_prev[7];
	end
	if (
		( Debug_A_expected_prev[8] !== 1'bx ) && ( Debug_A_prev[8] !== Debug_A_expected_prev[8] )
		&& ((Debug_A_expected_prev[8] !== last_Debug_A_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[8] = Debug_A_expected_prev[8];
	end
	if (
		( Debug_A_expected_prev[9] !== 1'bx ) && ( Debug_A_prev[9] !== Debug_A_expected_prev[9] )
		&& ((Debug_A_expected_prev[9] !== last_Debug_A_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[9] = Debug_A_expected_prev[9];
	end
	if (
		( Debug_A_expected_prev[10] !== 1'bx ) && ( Debug_A_prev[10] !== Debug_A_expected_prev[10] )
		&& ((Debug_A_expected_prev[10] !== last_Debug_A_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[10] = Debug_A_expected_prev[10];
	end
	if (
		( Debug_A_expected_prev[11] !== 1'bx ) && ( Debug_A_prev[11] !== Debug_A_expected_prev[11] )
		&& ((Debug_A_expected_prev[11] !== last_Debug_A_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[11] = Debug_A_expected_prev[11];
	end
	if (
		( Debug_A_expected_prev[12] !== 1'bx ) && ( Debug_A_prev[12] !== Debug_A_expected_prev[12] )
		&& ((Debug_A_expected_prev[12] !== last_Debug_A_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[12] = Debug_A_expected_prev[12];
	end
	if (
		( Debug_A_expected_prev[13] !== 1'bx ) && ( Debug_A_prev[13] !== Debug_A_expected_prev[13] )
		&& ((Debug_A_expected_prev[13] !== last_Debug_A_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[13] = Debug_A_expected_prev[13];
	end
	if (
		( Debug_A_expected_prev[14] !== 1'bx ) && ( Debug_A_prev[14] !== Debug_A_expected_prev[14] )
		&& ((Debug_A_expected_prev[14] !== last_Debug_A_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[14] = Debug_A_expected_prev[14];
	end
	if (
		( Debug_A_expected_prev[15] !== 1'bx ) && ( Debug_A_prev[15] !== Debug_A_expected_prev[15] )
		&& ((Debug_A_expected_prev[15] !== last_Debug_A_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_A_expected_prev);
		$display ("     Real value = %b", Debug_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Debug_A_exp[15] = Debug_A_expected_prev[15];
	end
	if (
		( Debug_B_expected_prev[0] !== 1'bx ) && ( Debug_B_prev[0] !== Debug_B_expected_prev[0] )
		&& ((Debug_B_expected_prev[0] !== last_Debug_B_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[0] = Debug_B_expected_prev[0];
	end
	if (
		( Debug_B_expected_prev[1] !== 1'bx ) && ( Debug_B_prev[1] !== Debug_B_expected_prev[1] )
		&& ((Debug_B_expected_prev[1] !== last_Debug_B_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[1] = Debug_B_expected_prev[1];
	end
	if (
		( Debug_B_expected_prev[2] !== 1'bx ) && ( Debug_B_prev[2] !== Debug_B_expected_prev[2] )
		&& ((Debug_B_expected_prev[2] !== last_Debug_B_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[2] = Debug_B_expected_prev[2];
	end
	if (
		( Debug_B_expected_prev[3] !== 1'bx ) && ( Debug_B_prev[3] !== Debug_B_expected_prev[3] )
		&& ((Debug_B_expected_prev[3] !== last_Debug_B_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[3] = Debug_B_expected_prev[3];
	end
	if (
		( Debug_B_expected_prev[4] !== 1'bx ) && ( Debug_B_prev[4] !== Debug_B_expected_prev[4] )
		&& ((Debug_B_expected_prev[4] !== last_Debug_B_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[4] = Debug_B_expected_prev[4];
	end
	if (
		( Debug_B_expected_prev[5] !== 1'bx ) && ( Debug_B_prev[5] !== Debug_B_expected_prev[5] )
		&& ((Debug_B_expected_prev[5] !== last_Debug_B_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[5] = Debug_B_expected_prev[5];
	end
	if (
		( Debug_B_expected_prev[6] !== 1'bx ) && ( Debug_B_prev[6] !== Debug_B_expected_prev[6] )
		&& ((Debug_B_expected_prev[6] !== last_Debug_B_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[6] = Debug_B_expected_prev[6];
	end
	if (
		( Debug_B_expected_prev[7] !== 1'bx ) && ( Debug_B_prev[7] !== Debug_B_expected_prev[7] )
		&& ((Debug_B_expected_prev[7] !== last_Debug_B_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[7] = Debug_B_expected_prev[7];
	end
	if (
		( Debug_B_expected_prev[8] !== 1'bx ) && ( Debug_B_prev[8] !== Debug_B_expected_prev[8] )
		&& ((Debug_B_expected_prev[8] !== last_Debug_B_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[8] = Debug_B_expected_prev[8];
	end
	if (
		( Debug_B_expected_prev[9] !== 1'bx ) && ( Debug_B_prev[9] !== Debug_B_expected_prev[9] )
		&& ((Debug_B_expected_prev[9] !== last_Debug_B_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[9] = Debug_B_expected_prev[9];
	end
	if (
		( Debug_B_expected_prev[10] !== 1'bx ) && ( Debug_B_prev[10] !== Debug_B_expected_prev[10] )
		&& ((Debug_B_expected_prev[10] !== last_Debug_B_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[10] = Debug_B_expected_prev[10];
	end
	if (
		( Debug_B_expected_prev[11] !== 1'bx ) && ( Debug_B_prev[11] !== Debug_B_expected_prev[11] )
		&& ((Debug_B_expected_prev[11] !== last_Debug_B_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[11] = Debug_B_expected_prev[11];
	end
	if (
		( Debug_B_expected_prev[12] !== 1'bx ) && ( Debug_B_prev[12] !== Debug_B_expected_prev[12] )
		&& ((Debug_B_expected_prev[12] !== last_Debug_B_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[12] = Debug_B_expected_prev[12];
	end
	if (
		( Debug_B_expected_prev[13] !== 1'bx ) && ( Debug_B_prev[13] !== Debug_B_expected_prev[13] )
		&& ((Debug_B_expected_prev[13] !== last_Debug_B_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[13] = Debug_B_expected_prev[13];
	end
	if (
		( Debug_B_expected_prev[14] !== 1'bx ) && ( Debug_B_prev[14] !== Debug_B_expected_prev[14] )
		&& ((Debug_B_expected_prev[14] !== last_Debug_B_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[14] = Debug_B_expected_prev[14];
	end
	if (
		( Debug_B_expected_prev[15] !== 1'bx ) && ( Debug_B_prev[15] !== Debug_B_expected_prev[15] )
		&& ((Debug_B_expected_prev[15] !== last_Debug_B_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Debug_B[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Debug_B_expected_prev);
		$display ("     Real value = %b", Debug_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Debug_B_exp[15] = Debug_B_expected_prev[15];
	end
	if (
		( LED_16_expected_prev[0] !== 1'bx ) && ( LED_16_prev[0] !== LED_16_expected_prev[0] )
		&& ((LED_16_expected_prev[0] !== last_LED_16_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[0] = LED_16_expected_prev[0];
	end
	if (
		( LED_16_expected_prev[1] !== 1'bx ) && ( LED_16_prev[1] !== LED_16_expected_prev[1] )
		&& ((LED_16_expected_prev[1] !== last_LED_16_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[1] = LED_16_expected_prev[1];
	end
	if (
		( LED_16_expected_prev[2] !== 1'bx ) && ( LED_16_prev[2] !== LED_16_expected_prev[2] )
		&& ((LED_16_expected_prev[2] !== last_LED_16_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[2] = LED_16_expected_prev[2];
	end
	if (
		( LED_16_expected_prev[3] !== 1'bx ) && ( LED_16_prev[3] !== LED_16_expected_prev[3] )
		&& ((LED_16_expected_prev[3] !== last_LED_16_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[3] = LED_16_expected_prev[3];
	end
	if (
		( LED_16_expected_prev[4] !== 1'bx ) && ( LED_16_prev[4] !== LED_16_expected_prev[4] )
		&& ((LED_16_expected_prev[4] !== last_LED_16_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[4] = LED_16_expected_prev[4];
	end
	if (
		( LED_16_expected_prev[5] !== 1'bx ) && ( LED_16_prev[5] !== LED_16_expected_prev[5] )
		&& ((LED_16_expected_prev[5] !== last_LED_16_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[5] = LED_16_expected_prev[5];
	end
	if (
		( LED_16_expected_prev[6] !== 1'bx ) && ( LED_16_prev[6] !== LED_16_expected_prev[6] )
		&& ((LED_16_expected_prev[6] !== last_LED_16_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[6] = LED_16_expected_prev[6];
	end
	if (
		( LED_16_expected_prev[7] !== 1'bx ) && ( LED_16_prev[7] !== LED_16_expected_prev[7] )
		&& ((LED_16_expected_prev[7] !== last_LED_16_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[7] = LED_16_expected_prev[7];
	end
	if (
		( LED_16_expected_prev[8] !== 1'bx ) && ( LED_16_prev[8] !== LED_16_expected_prev[8] )
		&& ((LED_16_expected_prev[8] !== last_LED_16_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[8] = LED_16_expected_prev[8];
	end
	if (
		( LED_16_expected_prev[9] !== 1'bx ) && ( LED_16_prev[9] !== LED_16_expected_prev[9] )
		&& ((LED_16_expected_prev[9] !== last_LED_16_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[9] = LED_16_expected_prev[9];
	end
	if (
		( LED_16_expected_prev[10] !== 1'bx ) && ( LED_16_prev[10] !== LED_16_expected_prev[10] )
		&& ((LED_16_expected_prev[10] !== last_LED_16_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[10] = LED_16_expected_prev[10];
	end
	if (
		( LED_16_expected_prev[11] !== 1'bx ) && ( LED_16_prev[11] !== LED_16_expected_prev[11] )
		&& ((LED_16_expected_prev[11] !== last_LED_16_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[11] = LED_16_expected_prev[11];
	end
	if (
		( LED_16_expected_prev[12] !== 1'bx ) && ( LED_16_prev[12] !== LED_16_expected_prev[12] )
		&& ((LED_16_expected_prev[12] !== last_LED_16_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[12] = LED_16_expected_prev[12];
	end
	if (
		( LED_16_expected_prev[13] !== 1'bx ) && ( LED_16_prev[13] !== LED_16_expected_prev[13] )
		&& ((LED_16_expected_prev[13] !== last_LED_16_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[13] = LED_16_expected_prev[13];
	end
	if (
		( LED_16_expected_prev[14] !== 1'bx ) && ( LED_16_prev[14] !== LED_16_expected_prev[14] )
		&& ((LED_16_expected_prev[14] !== last_LED_16_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[14] = LED_16_expected_prev[14];
	end
	if (
		( LED_16_expected_prev[15] !== 1'bx ) && ( LED_16_prev[15] !== LED_16_expected_prev[15] )
		&& ((LED_16_expected_prev[15] !== last_LED_16_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_16[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_16_expected_prev);
		$display ("     Real value = %b", LED_16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_16_exp[15] = LED_16_expected_prev[15];
	end
	if (
		( LED_TERMINO_expected_prev !== 1'bx ) && ( LED_TERMINO_prev !== LED_TERMINO_expected_prev )
		&& ((LED_TERMINO_expected_prev !== last_LED_TERMINO_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_TERMINO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_TERMINO_expected_prev);
		$display ("     Real value = %b", LED_TERMINO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LED_TERMINO_exp = LED_TERMINO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Projeto_final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg LER_A;
reg LER_B;
reg Operar;
reg Reset;
reg [15:0] Switches;
reg Validar;
// wires                                               
wire [6:0] D1;
wire [6:0] D2;
wire [6:0] D3;
wire [6:0] D4;
wire [15:0] Debug_A;
wire [15:0] Debug_B;
wire [15:0] LED_16;
wire LED_TERMINO;

wire sampler;                             

// assign statements (if any)                          
Projeto_final i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.Debug_A(Debug_A),
	.Debug_B(Debug_B),
	.LED_16(LED_16),
	.LED_TERMINO(LED_TERMINO),
	.LER_A(LER_A),
	.LER_B(LER_B),
	.Operar(Operar),
	.Reset(Reset),
	.Switches(Switches),
	.Validar(Validar)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// LER_A
initial
begin
	LER_A = 1'b0;
	LER_A = #10000 1'b1;
	LER_A = #20000 1'b0;
end 

// LER_B
initial
begin
	LER_B = 1'b0;
	LER_B = #50000 1'b1;
	LER_B = #20000 1'b0;
end 

// Operar
initial
begin
	Operar = 1'b0;
	Operar = #130000 1'b1;
	Operar = #20000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

// Validar
initial
begin
	Validar = 1'b0;
	Validar = #10000 1'b1;
	Validar = #20000 1'b0;
	Validar = #20000 1'b1;
	Validar = #20000 1'b0;
end 
// Switches[ 15 ]
initial
begin
	Switches[15] = 1'b0;
end 
// Switches[ 14 ]
initial
begin
	Switches[14] = 1'b0;
end 
// Switches[ 13 ]
initial
begin
	Switches[13] = 1'b0;
end 
// Switches[ 12 ]
initial
begin
	Switches[12] = 1'b0;
end 
// Switches[ 11 ]
initial
begin
	Switches[11] = 1'b0;
end 
// Switches[ 10 ]
initial
begin
	Switches[10] = 1'b0;
end 
// Switches[ 9 ]
initial
begin
	Switches[9] = 1'b0;
end 
// Switches[ 8 ]
initial
begin
	Switches[8] = 1'b0;
end 
// Switches[ 7 ]
initial
begin
	Switches[7] = 1'b0;
end 
// Switches[ 6 ]
initial
begin
	Switches[6] = 1'b0;
end 
// Switches[ 5 ]
initial
begin
	Switches[5] = 1'b0;
	Switches[5] = #50000 1'b1;
	Switches[5] = #20000 1'b0;
end 
// Switches[ 4 ]
initial
begin
	Switches[4] = 1'b0;
end 
// Switches[ 3 ]
initial
begin
	Switches[3] = 1'b0;
	Switches[3] = #10000 1'b1;
	Switches[3] = #20000 1'b0;
	Switches[3] = #20000 1'b1;
	Switches[3] = #20000 1'b0;
end 
// Switches[ 2 ]
initial
begin
	Switches[2] = 1'b0;
	Switches[2] = #50000 1'b1;
	Switches[2] = #20000 1'b0;
end 
// Switches[ 1 ]
initial
begin
	Switches[1] = 1'b0;
	Switches[1] = #10000 1'b1;
	Switches[1] = #20000 1'b0;
end 
// Switches[ 0 ]
initial
begin
	Switches[0] = 1'b0;
	Switches[0] = #50000 1'b1;
	Switches[0] = #20000 1'b0;
end 

Projeto_final_vlg_sample_tst tb_sample (
	.clk(clk),
	.LER_A(LER_A),
	.LER_B(LER_B),
	.Operar(Operar),
	.Reset(Reset),
	.Switches(Switches),
	.Validar(Validar),
	.sampler_tx(sampler)
);

Projeto_final_vlg_check_tst tb_out(
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.Debug_A(Debug_A),
	.Debug_B(Debug_B),
	.LED_16(LED_16),
	.LED_TERMINO(LED_TERMINO),
	.sampler_rx(sampler)
);
endmodule

